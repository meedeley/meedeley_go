// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE
    id = $1
RETURNING
    id,
    name,
    email,
    created_at,
    updated_at
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const findAllUser = `-- name: FindAllUser :many
SELECT id, name, email, created_at, updated_at FROM users
`

type FindAllUserRow struct {
	ID        int32
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) FindAllUser(ctx context.Context) ([]FindAllUserRow, error) {
	rows, err := q.db.Query(ctx, findAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllUserRow
	for rows.Next() {
		var i FindAllUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, email, password FROM users WHERE email = $1
`

type FindUserByEmailRow struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT
    id,
    name,
    email,
    created_at,
    updated_at
FROM users
WHERE
    id = $1
`

type FindUserByIdRow struct {
	ID        int32
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) FindUserById(ctx context.Context, id int32) (FindUserByIdRow, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i FindUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (name, email, password)
VALUES ($1, $2, $3)
RETURNING
    id,
    name,
    email,
    created_at,
    updated_at
`

type InsertUserParams struct {
	Name     string
	Email    string
	Password string
}

type InsertUserRow struct {
	ID        int32
	Name      string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Email, arg.Password)
	var i InsertUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET
    name = $2,
    email = $3,
    updated_at = $4
WHERE
    id = $1
RETURNING
    id,
    name,
    email,
    updated_at
`

type UpdateUserByIdParams struct {
	ID        int32
	Name      string
	Email     string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserById,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.UpdatedAt,
	)
	return err
}
